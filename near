#!/usr/bin/env node

const gulp = require('gulp');
const gulpfile = require('./gulpfile') // import the gulp file
const yargs = require('yargs');


const deploy = {
  command: 'deploy',
  desc: 'deploy your smart contract',
  builder: (yargs) => yargs
    .option('contract_name', {
      desc: 'Contract name',
      type: 'string',
      required: true
    })
    .option('node_url', {
      desc: 'Near node url',
      type: 'string',
      default: 'http://localhost:3030'
    })
    .option('wasm_file', {
      desc: 'Path to wasm file to deploy',
      type: 'string',
      default: './out/main.wasm'
    })
    .option('account_id', {
      desc: 'Your developer account id. If you have only one account, that one will be selected by default',
      type: 'string',
    }),
  handler: (argv) => {
    gulp.on('error', function(e) {
      console.log("Deploy failed. Error:")
      console.log(e.error);
    });
    if (gulp.task('deploy')) {
      const result = gulp.task('deploy')(argv).catch(console.log);
    } else {
      throw "Unexpected error: deploy task not found in gulpfile."
    }
  }
};

const build = {
  command: 'build',
  desc: 'build your smart contract',
  builder: (yargs) => yargs
    .option('src_dir', {
      desc: 'Source directory',
      type: 'string',
      default: './assembly'
    })
    .option('out_dir', {
      desc: 'Output directory',
      type: 'string',
      default: './out'
    })
    .option('out_file', {
      desc: 'Output file',
      type: 'string',
      default: 'main.wasm'
    })
    .option('model_files', {
      desc: 'Path to model files (additional classes used in contract)',
      type: 'array',
      default: ['model.ts']
    })
    .option('contract_file', {
      desc: 'Path to main contract file',
      type: 'string',
      default: 'main.ts'
    }),
  handler: (argv) => {
    gulp.on('error', function(e) {
        console.log("Build failed. Error:")
        console.log(e.error);
    });
    if (gulp.task('build')) {
      const t = gulp.task('build')();
    } else {
      throw "Unexpected error: build task not found in gulpfile."
    }
  }
};

const createAccount = {
  command: 'create_account',
  desc: 'create a developer account',
  builder: (yargs) => yargs
    .option('node_url', {
      desc: 'Near node url',
      type: 'string',
      default: 'http://localhost:3030'
    })
    .option('account_id', {
      desc: 'Unique identifier for the new account',
      type: 'string',
      required: true
    })
  ,
  handler: (argv) => {
    gulp.on('error', function(e) {
      console.log("Create account failed. Error:")
      console.log(e.error);
    });
    if (gulp.task('createDevAccount')) {
      const result = gulp.task('createDevAccount')(argv).catch(console.log);
    } else {
      throw "Unexpected error: createDevAccount task not found in gulpfile."
    }
  }
};

const clean = {
  command: 'clean',
  desc: 'clean the build environment',
  builder: (yargs) => yargs
    .option('out_dir', {
      desc: 'build directory',
      type: 'string',
      default: './out'
    })
  ,
  handler: (argv) => {
    gulp.on('error', function(e) {
      console.log("Clean failed. Error:")
      console.log(e.error);
    });
    if (gulp.task('clean')) {
      const result = gulp.task('clean')(argv).catch(console.log);
    } else {
      throw "Unexpected error: clean task not found in gulpfile."
    }
  }
};

const newProject = {
  command: 'new_project',
  desc: 'create a new blank project',
  builder: (yargs) => yargs
    .option('project_dir', {
      desc: 'project directory',
      type: 'string',
      default: '.'
    })
  ,
  handler: (argv) => {
    console.log(__dirname);
    gulp.on('error', function(e) {
      console.log("Create new project failed. Error:")
      console.log(e.error);
    });
    if (gulp.task('newProject')) {
      const result = gulp.task('newProject')(argv).catch(console.log);
    } else {
      throw "Unexpected error: clean task not found in gulpfile."
    }
  }
};

yargs // eslint-disable-line
  .command(createAccount)
  .command(build)
  .command(deploy)
  .command(clean)
  .command(newProject)
  .demandCommand(1, 'Please enter a command')
  .argv;

